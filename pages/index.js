import { useCallback, useState, useRef } from 'react'
import Head from "next/head";
import { Container } from '@mui/material'
import { toast } from 'react-toastify';
// *** redux ***
import { wrapper } from '@/store/store';
// *** components ***
import CustomCheckbox from '@/components/common/FormFields/CustomCheckbox'
import CustomButton from '@/components/common/FormFields/CustomButton'
import CustomInput from '@/components/common/FormFields/CustomInput'
import CustomDatePicker from '@/components/common/FormFields/CustomDatePicker'
import CustomSelect from '@/components/common/FormFields/CustomSelect'
import CustomFileUpload from '@/components/common/FormFields/CustomFileUpload'
// *** Icons ***
import AddIcon from '@mui/icons-material/Add'


const options = [
  { name: "melon", value: "Melon" },
  { name: "banana", value: "Banana" },
  { name: "pineapple", value: "Pineapple" },
  { name: "mango", value: "Mango" },
]


export default function Home({ state }) {

  const inputRef = useRef()

  // const [loading, setLoading] = useState(false)
  // const [value, setValue] = useState()

  const [fileUploadValue, setFileUploadValue] = useState()

  const handleFileUploadChange = useCallback((event) => {
    if(event.target.files.length > 0) {
      setFileUploadValue(event.target.files[0]);
    }
    else setFileUploadValue();      
  }, [])


  const handleChange = useCallback((event) => {
    setValue(event.target.value)
    // console.log("arg1: ", arg1);
    // console.log("arg2: ", arg2);
    // console.log("arg3: ", arg3);
    // console.log("arg4: ", arg4);
    // console.log("-------------------------------");

  }, [])



  const showToast = useCallback(() => {
    const resolveAfter3Sec = new Promise(resolve => setTimeout(resolve, 3000));
    toast.promise(
        resolveAfter3Sec,
        {
          pending: 'Promise is pending',
          success: 'Promise resolved ðŸ‘Œ',
          error: 'Promise rejected ðŸ¤¯'
        }
    )
    
  }, [])

  return (
    <>
      <Head>
        <title>vCard Link</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

        <Container sx={{ mt: 8 }}>
          {/* <div style={{ marginBottom: 20 }}>
            <CustomButton
              size="small"
              innerText="Button 1"
              loading={loading}
              startIcon={<AddIcon />}
            />
          </div>

          <div style={{ marginBottom: 20 }}>
            <CustomButton
              size="medium"
              innerText="Button 2"
              loading={loading}
              startIcon={<AddIcon />}
            />
          </div>

          <div style={{ marginBottom: 20 }}>
            <CustomButton
              size="large"
              innerText="Button 3"
              loading={loading}
              startIcon={<AddIcon />}
            />
          </div>

          
          <div>



            <CustomInput
              name="username"
              labelText="Username"
              placeholder="Username"
              // error
              // helperText="Required Field."
              fullWidth
              margin="dense"
            />

            <CustomInput
              name="username"
              labelText="Username"
              placeholder="Username"
              // error
              // helperText="Required Field."
              fullWidth
              margin="dense"
            />

            <CustomInput
              type="password"
              name="password"
              labelText="Password"
              placeholder="Password"
              // error
              // helperText="Required Field."
              fullWidth
              margin="dense"
              required
            />

          </div>


          <div>

            <CustomCheckbox labelText="Apple" />
            <CustomCheckbox labelText="Banana" />
            <CustomCheckbox labelText="Fruit Salad" />
            <CustomCheckbox labelText="Watermelon" />

            
            <CustomInput
              name="message"
              labelText="Message"
              placeholder="Message"
              multiline
              error
              minRows={4}
              maxRows={10}
              helperText="Required Field."
              fullWidth
            />
          </div>

          <br />
          <br />



          <br />
          <br />


          <button onClick={() => setLoading(!loading)}>Toggle Loading</button> */}


          <div>
            <CustomFileUpload
              ref={inputRef}
              value={fileUploadValue}
              onChange={handleFileUploadChange}
              margin="normal"
            />
          </div>


          <div>
            <CustomInput
              type="password"
              name="password"
              labelText="Password"
              placeholder="Password"
              // error
              // helperText="Required Field."
              fullWidth
              margin="normal"
            // required
            />
          </div>


          {/* <div>
            <CustomSelect
              labelText="Fruit"
              placeholder="Select your favorite fruit"
              name="fruits"
              margin="normal"
              value={value}
              options={options}
              onChange={handleChange}
              fullWidth
              required
              error
              helperText="Required Field."
            />
          </div>

          <div>
            <CustomDatePicker
              value={value}
              onChange={handleChange}
              labelText="Date of birth"
              placeholder="Date of birth"
              required
              fullWidth
              margin="normal"
              error={true}
              helperText="Required Field."
            />
          </div>

          <div>
            <CustomInput
              name="message"
              labelText="Message"
              placeholder="Message"
              multiline
              minRows={4}
              maxRows={10}
              error
              helperText="Required Field."
              fullWidth
              margin="normal"
            />
          </div> */}


          <button onClick={showToast}>showToast</button>


        </Container >
      </main>
    </>
  );
}






export const getServerSideProps = wrapper.getServerSideProps((store) => async ({ req, res }) => {
  const state = store.getState(state => state.auth);

  return {
    props: {
      state
    },
  };
});
